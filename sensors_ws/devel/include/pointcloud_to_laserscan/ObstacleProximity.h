// Generated by gencpp from file pointcloud_to_laserscan/ObstacleProximity.msg
// DO NOT EDIT!


#ifndef POINTCLOUD_TO_LASERSCAN_MESSAGE_OBSTACLEPROXIMITY_H
#define POINTCLOUD_TO_LASERSCAN_MESSAGE_OBSTACLEPROXIMITY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pointcloud_to_laserscan
{
template <class ContainerAllocator>
struct ObstacleProximity_
{
  typedef ObstacleProximity_<ContainerAllocator> Type;

  ObstacleProximity_()
    : shortest_distance_to_obstacle_LS(0.0)
    , shortest_distance_to_obstacle_RS(0.0)
    , shortest_distance_to_obstacle_FT(0.0)
    , shortest_distance_to_obstacle_BK(0.0)
    , left_side_blocked(0)
    , right_side_blocked(0)
    , front_side_blocked(0)  {
    }
  ObstacleProximity_(const ContainerAllocator& _alloc)
    : shortest_distance_to_obstacle_LS(0.0)
    , shortest_distance_to_obstacle_RS(0.0)
    , shortest_distance_to_obstacle_FT(0.0)
    , shortest_distance_to_obstacle_BK(0.0)
    , left_side_blocked(0)
    , right_side_blocked(0)
    , front_side_blocked(0)  {
  (void)_alloc;
    }



   typedef float _shortest_distance_to_obstacle_LS_type;
  _shortest_distance_to_obstacle_LS_type shortest_distance_to_obstacle_LS;

   typedef float _shortest_distance_to_obstacle_RS_type;
  _shortest_distance_to_obstacle_RS_type shortest_distance_to_obstacle_RS;

   typedef float _shortest_distance_to_obstacle_FT_type;
  _shortest_distance_to_obstacle_FT_type shortest_distance_to_obstacle_FT;

   typedef float _shortest_distance_to_obstacle_BK_type;
  _shortest_distance_to_obstacle_BK_type shortest_distance_to_obstacle_BK;

   typedef int8_t _left_side_blocked_type;
  _left_side_blocked_type left_side_blocked;

   typedef int8_t _right_side_blocked_type;
  _right_side_blocked_type right_side_blocked;

   typedef int8_t _front_side_blocked_type;
  _front_side_blocked_type front_side_blocked;




  typedef boost::shared_ptr< ::pointcloud_to_laserscan::ObstacleProximity_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pointcloud_to_laserscan::ObstacleProximity_<ContainerAllocator> const> ConstPtr;

}; // struct ObstacleProximity_

typedef ::pointcloud_to_laserscan::ObstacleProximity_<std::allocator<void> > ObstacleProximity;

typedef boost::shared_ptr< ::pointcloud_to_laserscan::ObstacleProximity > ObstacleProximityPtr;
typedef boost::shared_ptr< ::pointcloud_to_laserscan::ObstacleProximity const> ObstacleProximityConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pointcloud_to_laserscan::ObstacleProximity_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pointcloud_to_laserscan::ObstacleProximity_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pointcloud_to_laserscan

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'pointcloud_to_laserscan': ['/home/administrator/sensors_ws/src/pointcloud_to_laserscan/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pointcloud_to_laserscan::ObstacleProximity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pointcloud_to_laserscan::ObstacleProximity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pointcloud_to_laserscan::ObstacleProximity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pointcloud_to_laserscan::ObstacleProximity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pointcloud_to_laserscan::ObstacleProximity_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pointcloud_to_laserscan::ObstacleProximity_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pointcloud_to_laserscan::ObstacleProximity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "387ca4833459998b5938e815fe525f5c";
  }

  static const char* value(const ::pointcloud_to_laserscan::ObstacleProximity_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x387ca4833459998bULL;
  static const uint64_t static_value2 = 0x5938e815fe525f5cULL;
};

template<class ContainerAllocator>
struct DataType< ::pointcloud_to_laserscan::ObstacleProximity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pointcloud_to_laserscan/ObstacleProximity";
  }

  static const char* value(const ::pointcloud_to_laserscan::ObstacleProximity_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pointcloud_to_laserscan::ObstacleProximity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 shortest_distance_to_obstacle_LS\n\
float32 shortest_distance_to_obstacle_RS\n\
float32 shortest_distance_to_obstacle_FT\n\
float32 shortest_distance_to_obstacle_BK\n\
int8 left_side_blocked\n\
int8 right_side_blocked\n\
int8 front_side_blocked\n\
";
  }

  static const char* value(const ::pointcloud_to_laserscan::ObstacleProximity_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pointcloud_to_laserscan::ObstacleProximity_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.shortest_distance_to_obstacle_LS);
      stream.next(m.shortest_distance_to_obstacle_RS);
      stream.next(m.shortest_distance_to_obstacle_FT);
      stream.next(m.shortest_distance_to_obstacle_BK);
      stream.next(m.left_side_blocked);
      stream.next(m.right_side_blocked);
      stream.next(m.front_side_blocked);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObstacleProximity_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pointcloud_to_laserscan::ObstacleProximity_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pointcloud_to_laserscan::ObstacleProximity_<ContainerAllocator>& v)
  {
    s << indent << "shortest_distance_to_obstacle_LS: ";
    Printer<float>::stream(s, indent + "  ", v.shortest_distance_to_obstacle_LS);
    s << indent << "shortest_distance_to_obstacle_RS: ";
    Printer<float>::stream(s, indent + "  ", v.shortest_distance_to_obstacle_RS);
    s << indent << "shortest_distance_to_obstacle_FT: ";
    Printer<float>::stream(s, indent + "  ", v.shortest_distance_to_obstacle_FT);
    s << indent << "shortest_distance_to_obstacle_BK: ";
    Printer<float>::stream(s, indent + "  ", v.shortest_distance_to_obstacle_BK);
    s << indent << "left_side_blocked: ";
    Printer<int8_t>::stream(s, indent + "  ", v.left_side_blocked);
    s << indent << "right_side_blocked: ";
    Printer<int8_t>::stream(s, indent + "  ", v.right_side_blocked);
    s << indent << "front_side_blocked: ";
    Printer<int8_t>::stream(s, indent + "  ", v.front_side_blocked);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POINTCLOUD_TO_LASERSCAN_MESSAGE_OBSTACLEPROXIMITY_H
