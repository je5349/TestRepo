// Generated by gencpp from file gpr_gps_converge/GprTraceLocation.msg
// DO NOT EDIT!


#ifndef GPR_GPS_CONVERGE_MESSAGE_GPRTRACELOCATION_H
#define GPR_GPS_CONVERGE_MESSAGE_GPRTRACELOCATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gpr_gps_converge
{
template <class ContainerAllocator>
struct GprTraceLocation_
{
  typedef GprTraceLocation_<ContainerAllocator> Type;

  GprTraceLocation_()
    : stamp()
    , CoordinateFormat()
    , Longitude(0.0)
    , Latitude(0.0)
    , Altitude(0.0)
    , latitude_label()
    , longitude_label()
    , UTMZone()  {
    }
  GprTraceLocation_(const ContainerAllocator& _alloc)
    : stamp()
    , CoordinateFormat(_alloc)
    , Longitude(0.0)
    , Latitude(0.0)
    , Altitude(0.0)
    , latitude_label(_alloc)
    , longitude_label(_alloc)
    , UTMZone(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _CoordinateFormat_type;
  _CoordinateFormat_type CoordinateFormat;

   typedef double _Longitude_type;
  _Longitude_type Longitude;

   typedef double _Latitude_type;
  _Latitude_type Latitude;

   typedef double _Altitude_type;
  _Altitude_type Altitude;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _latitude_label_type;
  _latitude_label_type latitude_label;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _longitude_label_type;
  _longitude_label_type longitude_label;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _UTMZone_type;
  _UTMZone_type UTMZone;




  typedef boost::shared_ptr< ::gpr_gps_converge::GprTraceLocation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gpr_gps_converge::GprTraceLocation_<ContainerAllocator> const> ConstPtr;

}; // struct GprTraceLocation_

typedef ::gpr_gps_converge::GprTraceLocation_<std::allocator<void> > GprTraceLocation;

typedef boost::shared_ptr< ::gpr_gps_converge::GprTraceLocation > GprTraceLocationPtr;
typedef boost::shared_ptr< ::gpr_gps_converge::GprTraceLocation const> GprTraceLocationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gpr_gps_converge::GprTraceLocation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gpr_gps_converge::GprTraceLocation_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gpr_gps_converge

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'gpr_gps_converge': ['/home/administrator/sensors_ws/src/gpr_gps_converge/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::gpr_gps_converge::GprTraceLocation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gpr_gps_converge::GprTraceLocation_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gpr_gps_converge::GprTraceLocation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gpr_gps_converge::GprTraceLocation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gpr_gps_converge::GprTraceLocation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gpr_gps_converge::GprTraceLocation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gpr_gps_converge::GprTraceLocation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad9b5784e3da422663d2055d98f6046f";
  }

  static const char* value(const ::gpr_gps_converge::GprTraceLocation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad9b5784e3da4226ULL;
  static const uint64_t static_value2 = 0x63d2055d98f6046fULL;
};

template<class ContainerAllocator>
struct DataType< ::gpr_gps_converge::GprTraceLocation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gpr_gps_converge/GprTraceLocation";
  }

  static const char* value(const ::gpr_gps_converge::GprTraceLocation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gpr_gps_converge::GprTraceLocation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n\
string CoordinateFormat\n\
float64 Longitude\n\
float64 Latitude\n\
float64 Altitude\n\
string latitude_label\n\
string longitude_label\n\
string UTMZone\n\
\n\
";
  }

  static const char* value(const ::gpr_gps_converge::GprTraceLocation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gpr_gps_converge::GprTraceLocation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.CoordinateFormat);
      stream.next(m.Longitude);
      stream.next(m.Latitude);
      stream.next(m.Altitude);
      stream.next(m.latitude_label);
      stream.next(m.longitude_label);
      stream.next(m.UTMZone);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GprTraceLocation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gpr_gps_converge::GprTraceLocation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gpr_gps_converge::GprTraceLocation_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "CoordinateFormat: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.CoordinateFormat);
    s << indent << "Longitude: ";
    Printer<double>::stream(s, indent + "  ", v.Longitude);
    s << indent << "Latitude: ";
    Printer<double>::stream(s, indent + "  ", v.Latitude);
    s << indent << "Altitude: ";
    Printer<double>::stream(s, indent + "  ", v.Altitude);
    s << indent << "latitude_label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.latitude_label);
    s << indent << "longitude_label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.longitude_label);
    s << indent << "UTMZone: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.UTMZone);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GPR_GPS_CONVERGE_MESSAGE_GPRTRACELOCATION_H
