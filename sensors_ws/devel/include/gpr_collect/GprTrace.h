// Generated by gencpp from file gpr_collect/GprTrace.msg
// DO NOT EDIT!


#ifndef GPR_COLLECT_MESSAGE_GPRTRACE_H
#define GPR_COLLECT_MESSAGE_GPRTRACE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gpr_collect
{
template <class ContainerAllocator>
struct GprTrace_
{
  typedef GprTrace_<ContainerAllocator> Type;

  GprTrace_()
    : rosTime_()
    , traceSize_(0)
    , headerSize_(0)
    , headerID_()
    , stampCount_(0)
    , traceNumber_(0)
    , odoTick_(0)
    , tracePos_(0.0)
    , duration_(0.0)
    , traceStatusFlag_(0)
    , numStacks_(0)
    , hardwareFlag_(0)
    , traceData_()
    , dataSize_(0)
    , sampleInterval_()
    , frequency_()  {
    }
  GprTrace_(const ContainerAllocator& _alloc)
    : rosTime_()
    , traceSize_(0)
    , headerSize_(0)
    , headerID_(_alloc)
    , stampCount_(0)
    , traceNumber_(0)
    , odoTick_(0)
    , tracePos_(0.0)
    , duration_(0.0)
    , traceStatusFlag_(0)
    , numStacks_(0)
    , hardwareFlag_(0)
    , traceData_(_alloc)
    , dataSize_(0)
    , sampleInterval_(_alloc)
    , frequency_(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _rosTime__type;
  _rosTime__type rosTime_;

   typedef int64_t _traceSize__type;
  _traceSize__type traceSize_;

   typedef uint16_t _headerSize__type;
  _headerSize__type headerSize_;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _headerID__type;
  _headerID__type headerID_;

   typedef uint32_t _stampCount__type;
  _stampCount__type stampCount_;

   typedef uint32_t _traceNumber__type;
  _traceNumber__type traceNumber_;

   typedef uint32_t _odoTick__type;
  _odoTick__type odoTick_;

   typedef double _tracePos__type;
  _tracePos__type tracePos_;

   typedef double _duration__type;
  _duration__type duration_;

   typedef uint32_t _traceStatusFlag__type;
  _traceStatusFlag__type traceStatusFlag_;

   typedef uint16_t _numStacks__type;
  _numStacks__type numStacks_;

   typedef uint16_t _hardwareFlag__type;
  _hardwareFlag__type hardwareFlag_;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _traceData__type;
  _traceData__type traceData_;

   typedef int32_t _dataSize__type;
  _dataSize__type dataSize_;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _sampleInterval__type;
  _sampleInterval__type sampleInterval_;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frequency__type;
  _frequency__type frequency_;




  typedef boost::shared_ptr< ::gpr_collect::GprTrace_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gpr_collect::GprTrace_<ContainerAllocator> const> ConstPtr;

}; // struct GprTrace_

typedef ::gpr_collect::GprTrace_<std::allocator<void> > GprTrace;

typedef boost::shared_ptr< ::gpr_collect::GprTrace > GprTracePtr;
typedef boost::shared_ptr< ::gpr_collect::GprTrace const> GprTraceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gpr_collect::GprTrace_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gpr_collect::GprTrace_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gpr_collect

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'gpr_collect': ['/home/administrator/sensors_ws/src/gpr_collect/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::gpr_collect::GprTrace_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gpr_collect::GprTrace_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gpr_collect::GprTrace_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gpr_collect::GprTrace_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gpr_collect::GprTrace_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gpr_collect::GprTrace_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gpr_collect::GprTrace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b4513f925d00b8c1929dd5775e542a50";
  }

  static const char* value(const ::gpr_collect::GprTrace_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb4513f925d00b8c1ULL;
  static const uint64_t static_value2 = 0x929dd5775e542a50ULL;
};

template<class ContainerAllocator>
struct DataType< ::gpr_collect::GprTrace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gpr_collect/GprTrace";
  }

  static const char* value(const ::gpr_collect::GprTrace_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gpr_collect::GprTrace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time rosTime_\n\
int64 traceSize_\n\
uint16 headerSize_\n\
string headerID_\n\
uint32 stampCount_\n\
uint32 traceNumber_\n\
uint32 odoTick_\n\
float64 tracePos_\n\
float64 duration_\n\
uint32 traceStatusFlag_\n\
uint16 numStacks_\n\
uint16 hardwareFlag_\n\
int16[] traceData_\n\
int32 dataSize_\n\
string sampleInterval_\n\
string frequency_\n\
";
  }

  static const char* value(const ::gpr_collect::GprTrace_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gpr_collect::GprTrace_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rosTime_);
      stream.next(m.traceSize_);
      stream.next(m.headerSize_);
      stream.next(m.headerID_);
      stream.next(m.stampCount_);
      stream.next(m.traceNumber_);
      stream.next(m.odoTick_);
      stream.next(m.tracePos_);
      stream.next(m.duration_);
      stream.next(m.traceStatusFlag_);
      stream.next(m.numStacks_);
      stream.next(m.hardwareFlag_);
      stream.next(m.traceData_);
      stream.next(m.dataSize_);
      stream.next(m.sampleInterval_);
      stream.next(m.frequency_);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GprTrace_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gpr_collect::GprTrace_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gpr_collect::GprTrace_<ContainerAllocator>& v)
  {
    s << indent << "rosTime_: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.rosTime_);
    s << indent << "traceSize_: ";
    Printer<int64_t>::stream(s, indent + "  ", v.traceSize_);
    s << indent << "headerSize_: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.headerSize_);
    s << indent << "headerID_: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.headerID_);
    s << indent << "stampCount_: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.stampCount_);
    s << indent << "traceNumber_: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.traceNumber_);
    s << indent << "odoTick_: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.odoTick_);
    s << indent << "tracePos_: ";
    Printer<double>::stream(s, indent + "  ", v.tracePos_);
    s << indent << "duration_: ";
    Printer<double>::stream(s, indent + "  ", v.duration_);
    s << indent << "traceStatusFlag_: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.traceStatusFlag_);
    s << indent << "numStacks_: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.numStacks_);
    s << indent << "hardwareFlag_: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.hardwareFlag_);
    s << indent << "traceData_[]" << std::endl;
    for (size_t i = 0; i < v.traceData_.size(); ++i)
    {
      s << indent << "  traceData_[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.traceData_[i]);
    }
    s << indent << "dataSize_: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dataSize_);
    s << indent << "sampleInterval_: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.sampleInterval_);
    s << indent << "frequency_: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frequency_);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GPR_COLLECT_MESSAGE_GPRTRACE_H
