// Generated by gencpp from file os5000s_compass/compass_heading.msg
// DO NOT EDIT!


#ifndef OS5000S_COMPASS_MESSAGE_COMPASS_HEADING_H
#define OS5000S_COMPASS_MESSAGE_COMPASS_HEADING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace os5000s_compass
{
template <class ContainerAllocator>
struct compass_heading_
{
  typedef compass_heading_<ContainerAllocator> Type;

  compass_heading_()
    : header()
    , heading(0.0)
    , pitch(0.0)
    , roll(0.0)
    , temperature(0.0)
    , depth(0.0)
    , magnetic_vector_length(0.0)
    , mx(0.0)
    , my(0.0)
    , mz(0.0)
    , acceleration_vector_length(0.0)
    , ax(0.0)
    , ay(0.0)
    , az(0.0)  {
    }
  compass_heading_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , heading(0.0)
    , pitch(0.0)
    , roll(0.0)
    , temperature(0.0)
    , depth(0.0)
    , magnetic_vector_length(0.0)
    , mx(0.0)
    , my(0.0)
    , mz(0.0)
    , acceleration_vector_length(0.0)
    , ax(0.0)
    , ay(0.0)
    , az(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _heading_type;
  _heading_type heading;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _temperature_type;
  _temperature_type temperature;

   typedef double _depth_type;
  _depth_type depth;

   typedef double _magnetic_vector_length_type;
  _magnetic_vector_length_type magnetic_vector_length;

   typedef double _mx_type;
  _mx_type mx;

   typedef double _my_type;
  _my_type my;

   typedef double _mz_type;
  _mz_type mz;

   typedef double _acceleration_vector_length_type;
  _acceleration_vector_length_type acceleration_vector_length;

   typedef double _ax_type;
  _ax_type ax;

   typedef double _ay_type;
  _ay_type ay;

   typedef double _az_type;
  _az_type az;




  typedef boost::shared_ptr< ::os5000s_compass::compass_heading_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::os5000s_compass::compass_heading_<ContainerAllocator> const> ConstPtr;

}; // struct compass_heading_

typedef ::os5000s_compass::compass_heading_<std::allocator<void> > compass_heading;

typedef boost::shared_ptr< ::os5000s_compass::compass_heading > compass_headingPtr;
typedef boost::shared_ptr< ::os5000s_compass::compass_heading const> compass_headingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::os5000s_compass::compass_heading_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::os5000s_compass::compass_heading_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace os5000s_compass

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'os5000s_compass': ['/home/administrator/sensors_ws/src/os5000s_compass/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::os5000s_compass::compass_heading_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::os5000s_compass::compass_heading_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::os5000s_compass::compass_heading_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::os5000s_compass::compass_heading_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::os5000s_compass::compass_heading_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::os5000s_compass::compass_heading_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::os5000s_compass::compass_heading_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4d631946929e4c0ee71698ce00779b80";
  }

  static const char* value(const ::os5000s_compass::compass_heading_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4d631946929e4c0eULL;
  static const uint64_t static_value2 = 0xe71698ce00779b80ULL;
};

template<class ContainerAllocator>
struct DataType< ::os5000s_compass::compass_heading_<ContainerAllocator> >
{
  static const char* value()
  {
    return "os5000s_compass/compass_heading";
  }

  static const char* value(const ::os5000s_compass::compass_heading_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::os5000s_compass::compass_heading_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
float64 heading\n\
float64 pitch\n\
float64 roll\n\
float64 temperature\n\
float64 depth\n\
float64 magnetic_vector_length\n\
float64 mx\n\
float64 my\n\
float64 mz\n\
float64 acceleration_vector_length\n\
float64 ax\n\
float64 ay\n\
float64 az\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::os5000s_compass::compass_heading_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::os5000s_compass::compass_heading_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.heading);
      stream.next(m.pitch);
      stream.next(m.roll);
      stream.next(m.temperature);
      stream.next(m.depth);
      stream.next(m.magnetic_vector_length);
      stream.next(m.mx);
      stream.next(m.my);
      stream.next(m.mz);
      stream.next(m.acceleration_vector_length);
      stream.next(m.ax);
      stream.next(m.ay);
      stream.next(m.az);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct compass_heading_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::os5000s_compass::compass_heading_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::os5000s_compass::compass_heading_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "temperature: ";
    Printer<double>::stream(s, indent + "  ", v.temperature);
    s << indent << "depth: ";
    Printer<double>::stream(s, indent + "  ", v.depth);
    s << indent << "magnetic_vector_length: ";
    Printer<double>::stream(s, indent + "  ", v.magnetic_vector_length);
    s << indent << "mx: ";
    Printer<double>::stream(s, indent + "  ", v.mx);
    s << indent << "my: ";
    Printer<double>::stream(s, indent + "  ", v.my);
    s << indent << "mz: ";
    Printer<double>::stream(s, indent + "  ", v.mz);
    s << indent << "acceleration_vector_length: ";
    Printer<double>::stream(s, indent + "  ", v.acceleration_vector_length);
    s << indent << "ax: ";
    Printer<double>::stream(s, indent + "  ", v.ax);
    s << indent << "ay: ";
    Printer<double>::stream(s, indent + "  ", v.ay);
    s << indent << "az: ";
    Printer<double>::stream(s, indent + "  ", v.az);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OS5000S_COMPASS_MESSAGE_COMPASS_HEADING_H
