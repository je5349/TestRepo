# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pointcloud_to_laserscan/ObstacleProximity.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ObstacleProximity(genpy.Message):
  _md5sum = "387ca4833459998b5938e815fe525f5c"
  _type = "pointcloud_to_laserscan/ObstacleProximity"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 shortest_distance_to_obstacle_LS
float32 shortest_distance_to_obstacle_RS
float32 shortest_distance_to_obstacle_FT
float32 shortest_distance_to_obstacle_BK
int8 left_side_blocked
int8 right_side_blocked
int8 front_side_blocked"""
  __slots__ = ['shortest_distance_to_obstacle_LS','shortest_distance_to_obstacle_RS','shortest_distance_to_obstacle_FT','shortest_distance_to_obstacle_BK','left_side_blocked','right_side_blocked','front_side_blocked']
  _slot_types = ['float32','float32','float32','float32','int8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       shortest_distance_to_obstacle_LS,shortest_distance_to_obstacle_RS,shortest_distance_to_obstacle_FT,shortest_distance_to_obstacle_BK,left_side_blocked,right_side_blocked,front_side_blocked

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObstacleProximity, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.shortest_distance_to_obstacle_LS is None:
        self.shortest_distance_to_obstacle_LS = 0.
      if self.shortest_distance_to_obstacle_RS is None:
        self.shortest_distance_to_obstacle_RS = 0.
      if self.shortest_distance_to_obstacle_FT is None:
        self.shortest_distance_to_obstacle_FT = 0.
      if self.shortest_distance_to_obstacle_BK is None:
        self.shortest_distance_to_obstacle_BK = 0.
      if self.left_side_blocked is None:
        self.left_side_blocked = 0
      if self.right_side_blocked is None:
        self.right_side_blocked = 0
      if self.front_side_blocked is None:
        self.front_side_blocked = 0
    else:
      self.shortest_distance_to_obstacle_LS = 0.
      self.shortest_distance_to_obstacle_RS = 0.
      self.shortest_distance_to_obstacle_FT = 0.
      self.shortest_distance_to_obstacle_BK = 0.
      self.left_side_blocked = 0
      self.right_side_blocked = 0
      self.front_side_blocked = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4f3b.pack(_x.shortest_distance_to_obstacle_LS, _x.shortest_distance_to_obstacle_RS, _x.shortest_distance_to_obstacle_FT, _x.shortest_distance_to_obstacle_BK, _x.left_side_blocked, _x.right_side_blocked, _x.front_side_blocked))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 19
      (_x.shortest_distance_to_obstacle_LS, _x.shortest_distance_to_obstacle_RS, _x.shortest_distance_to_obstacle_FT, _x.shortest_distance_to_obstacle_BK, _x.left_side_blocked, _x.right_side_blocked, _x.front_side_blocked,) = _struct_4f3b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4f3b.pack(_x.shortest_distance_to_obstacle_LS, _x.shortest_distance_to_obstacle_RS, _x.shortest_distance_to_obstacle_FT, _x.shortest_distance_to_obstacle_BK, _x.left_side_blocked, _x.right_side_blocked, _x.front_side_blocked))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 19
      (_x.shortest_distance_to_obstacle_LS, _x.shortest_distance_to_obstacle_RS, _x.shortest_distance_to_obstacle_FT, _x.shortest_distance_to_obstacle_BK, _x.left_side_blocked, _x.right_side_blocked, _x.front_side_blocked,) = _struct_4f3b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4f3b = struct.Struct("<4f3b")
